{
	"info": {
		"_postman_id": "de0a3376-48b4-4a9f-8d6b-0aff604c1271",
		"name": "VS13 ServerRest Aula1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33908903"
	},
	"item": [
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "Post",
					"item": [
						{
							"name": "Cadastrar com E-mail duplicado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastrar usuário com e-mail duplicado\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Este email já está sendo usado\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano3 da Silva\",\r\n  \"email\": \"beltrano@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/usuarios",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar sem nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Tentar cadastrar sem informar o nome do usuário\", function(){\r",
											"    pm.expect(respData.nome).to.eql(\"nome não pode ficar em branco\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"beltrano@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/usuarios",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar sem o e-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Tentar cadastrar sem informar o e-mail do usuário\", function(){\r",
											"    pm.expect(respData.email).to.eql(\"email não pode ficar em branco\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/usuarios",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					],
					"description": "Casos de testes de cenários negativos para endpoint Usuarios.\n\nPOST\n\nRequisitos: Não é permitido cadastrar produto com email já utilizado."
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Buscar com ID inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Buscar usuário com ID inválido\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Usuário não encontrado\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/usuarios/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "XDWFbuHFWQLHtgzp"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar com nome inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Buscar com nome inexistente\", function(){\r",
											"    pm.expect(respData.quantidade).to.eql(0);\r",
											"    pm.expect(respData.usuarios).to.be.an('array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/usuarios?nome=1589*aionbd",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "nome",
											"value": "1589*aionbd"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Casos de testes de cenários negativos para endpoint Usuarios.\n\nGET\n\nQuery Params:\n\n_id\n\nnome\n\nemail\n\npassword\n\nadministrador\n\nPath Params\n\n{_id}"
				},
				{
					"name": "Put",
					"item": [
						{
							"name": "Alterar e-mail para um já existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Editar para um email já existente\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Este email já está sendo usado\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"nome\": \"Fulano2 da Silva\",\r\n            \"email\": \"teste@qa.com.br\",\r\n            \"password\": \"teste\",\r\n            \"administrador\": \"true\"\r\n        }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/usuarios/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "XDWFbuHFWQLHtgze"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Alterar nome sem passar todos os dados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Tentar alterar o nome sem passar os demais campos\", function(){\r",
											"    pm.expect(respData.email).to.eql(\"email é obrigatório\");\r",
											"    pm.expect(respData.password).to.eql(\"password é obrigatório\");\r",
											"    pm.expect(respData.administrador).to.eql(\"administrador é obrigatório\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"Fulaninho da Silva\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/usuarios/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "XDWFbuHFWQLHtgze"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Casos de testes de cenários negativos para endpoint Usuarios.\n\nPUT\n\nRequisitos: Não é permitido cadastrar produto com email já utilizado.  \nCaso não seja encontrado usuario com o ID informado é realizado novo cadastro ao invés de alteração.\n\nPath\n\n{_id}\n\nbody\n\n``` json\n{\n  \"nome\": \"Fulano da Silva\",\n  \"email\": \"beltrano@qa.com.br\",\n  \"password\": \"teste\",\n  \"administrador\": \"true\"\n}\n\n ```"
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "ID inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Deletar im ID inexistente\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Nenhum registro excluído\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/usuarios/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "XDWFbuHFWQLHtgsd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sem informar o ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Deletar im ID inexistente\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Nenhum registro excluído\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/usuarios/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"usuarios",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Casos de testes de cenários negativos para endpoint Usuarios.\n\nDELETE\n\nRequisitos: Não é permitido excluir usuário com carrinho.  \n\nPath\n\n{_id}"
				},
				{
					"name": "Cadastrar Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica cadastro de usuario com sucesso\", function(){\r",
									"    pm.expect(respData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"    pm.expect(respData._id).to.not.be.null;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"{{nome}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"administrador\": \"{{administrador}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/usuarios",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar Usuario por ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/usuarios/:id",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"usuarios",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "NomqxluWlTDvIKuW"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar Usuarios",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/usuarios",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Atualizar Usuario por ID",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Camila Nazaré Pereira\",\r\n  \"email\": \"camila@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/usuarios/:id",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"usuarios",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Excluir Usuario por ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/usuarios/:id",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"usuarios",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "NomqxluWlTDvIKuW"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// nomes dos melhores QAs que já passaram pelo Vem Ser\r",
							"const nomes = [\"Adam\", \"Alessandra Mariana\", \"Aron\", \"Assucena\", \"Brayan\", \"Bruno\", \"Camila\", \"Carlos Alberto\", \"Débora\", \"Filipe\", \"Gabriel\", \"Grégori\", \"Helcius\", \"Italo\", \"Janier\", \"João Paulo\", \"Kevin\", \"Lucas\", \"Luísa\", \"Luiz Fellipe\",  \"Pedro Henrique\", \"Pedro\", \"Raphael\", \"Rodrigo\", \"Vinicius\", \"Vitor\", \"Willian\"];\r",
							"\r",
							"// sobrenomes dos melhores QAs que já passaram pelo Vem Ser\r",
							"const sobrenomes = [\"Cardoso\", \"Souza\", \"Rapetto\", \"Araujo\", \"Benet\", \"Scarpari\", \"Gonçalves\", \"Junior\", \"Hickmann\", \"Prata\", \"Santos\", \"Nunes\", \"Cabral\", \"Silva\", \"Bonetti\", \"Matos\", \"Lima\", \"Barbosa\", \"Oliveira\", \"Bersch\", \"Costa\", \"Clemente\", \"Nunes\",  \"Rodrigues\"];\r",
							"\r",
							"// selecione aleatoriamente nome e sobrenome e adicione à variável de amebiente\r",
							"pm.environment.set(\"nome\", nomes[_.random(nomes.length - 1)] + \" \" + sobrenomes[_.random(sobrenomes.length - 1)]);\r",
							"\r",
							"// selecione aleatoriamente email e adicione à variável de ambiente\r",
							"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
							"\r",
							"// selecione aleatoriamente senha e adicione à variável password\r",
							"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'))\r",
							"\r",
							"// selecione aleatoriamente um valor booleano e adicione à variável administrador\r",
							"pm.environment.set(\"administrador\", pm.variables.replaceIn('{{$randomBoolean}}'))"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "Post",
					"item": [
						{
							"name": "Cadastrar com Nome já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica cadastro de produto com mesmo nome\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Já existe produto com esse nome\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/produtos",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar não sendo administrador",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const login = {\r",
											"    url: pm.environment.get(\"Base_URL\") + \"/login\",\r",
											"    method: \"POST\",\r",
											"    header: {\r",
											"        \"Content-Type\" : \"application/json\"\r",
											"    },\r",
											"    body: {\r",
											"        mode: \"raw\",\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"Americo_Wintheiser74@gmail.com\",\r",
											"            \"password\": \"x5eMJUVNTJWZhDS\"\r",
											"        })\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(login, function(err, res){\r",
											"    pm.expect(err).is.null;\r",
											"    pm.environment.set(\"tokenValido\", res.json().authorization.split(\" \")[1]);\r",
											"});\r",
											"\r",
											"const keywords = [\r",
											"    \"Smartphone\", \"Tablet\", \"Notebook\", \"Smartwatch\", \"Fone de ouvido\", \"Caixa de som\", \"Câmera digital\",\r",
											"    \"Roteador\", \"Impressora\", \"Teclado\", \"Mouse\", \"Monitor\", \"Console de videogame\", \"Drone\", \"Robô aspirador\"\r",
											"];\r",
											"\r",
											"\r",
											"function generateRandomProductName() {\r",
											"    const randomIndex = Math.floor(Math.random() * keywords.length);\r",
											"    return keywords[randomIndex];\r",
											"}\r",
											"\r",
											"pm.environment.set(\"produto\", generateRandomProductName());\r",
											"\r",
											"pm.environment.set(\"preco\", Math.floor(Math.random() * 900) + 100);\r",
											"\r",
											"pm.environment.set(\"descricao\", pm.variables.replaceIn('{{$randomLoremSentences}}'));\r",
											"\r",
											"pm.environment.set(\"quantidade\", Math.floor(Math.random() * 900) + 100);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 403\", function(){\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastrar produto não sendo administrador\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Rota exclusiva para administradores\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenValido}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{produto}}\",\r\n  \"preco\": {{preco}},\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": {{quantidade}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/produtos",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					],
					"description": "Casos de testes de cenários negativos para endpoint Produtos.\n\nPOST\n\nRequisitos: Não é permitido cadastrar produto com nome já utilizado."
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Buscar com ID inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Buscar com ID inexistente\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Produto não encontrado\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/produtos/:id",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"produtos",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "BeeJh5lz3k6kSIbg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto com nome inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Buscar com ID inexistente\", function(){\r",
											"    pm.expect(respData.quantidade).to.eql(0);\r",
											"    pm.expect(respData.produtos).to.be.an('array').that.is.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/produtos?nome=12589",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "nome",
											"value": "12589"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Casos de testes de cenários negativos para endpoint Produtos.\n\nGET\n\nQuery Params:\n\n_id\n\nnome\n\npreco\n\ndescricao\n\nquantidade\n\nPath Params\n\n{_id}"
				},
				{
					"name": "Put",
					"item": [
						{
							"name": "Alterar nome sem passar todos os dados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Tentar alterar o nome sem passar os demais campos\", function(){\r",
											"    pm.expect(respData.preco).to.eql(\"preco deve ser um número\");\r",
											"    pm.expect(respData.descricao).to.eql(\"descricao não pode ficar em branco\");\r",
											"    pm.expect(respData.quantidade).to.eql(\"quantidade deve ser um número\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\":\"sacanner\",\r\n    \"preco\":\"\" ,\r\n    \"descricao\": \"\",\r\n    \"quantidade\":\"\" \r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/produtos/:id",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"produtos",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "09KYZUVSa4gZs4ay"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar para um nome já utilizado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Editar para um nome já existente\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Já existe produto com esse nome\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n      \"nome\": \"Logitech MX Vertical\",\r\n      \"preco\": 5240,\r\n      \"descricao\": \"TV\",\r\n      \"quantidade\": 49977\r\n     }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/produtos/:id",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"produtos",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "K6leHdftCeOJj8BJ"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Casos de testes de cenários negativos para endpoint Produtos.\n\nPUT\n\nRequisitos: Não é permitido cadastrar produto com nome já utilizado.  \nCaso não seja encontrado produto com o ID informado é realizado novo cadastro ao invés de alteração.  \n\nPath\n\n{_id}\n\nbody  \n\n``` json\n{\n  \"nome\": \"Logitech MX Vertical\",\n  \"preco\": 470,\n  \"descricao\": \"Mouse\",\n  \"quantidade\": 381\n}\n\n ```"
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "ID inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Deletar im ID inexistente\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Nenhum registro excluído\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/produtos/:id",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"produtos",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "BeeJh5lz3k6kSIbg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sem informar o ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Deletar im ID inexistente\", function(){\r",
											"    pm.expect(respData.message).to.eql(\"Nenhum registro excluído\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{Base_URL}}/produtos/:id",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"produtos",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Casos de testes de cenários negativos para endpoint Produtos.\n\nDELETE\n\nRequisitos: Não é permitido excluir produto que faz parte de carrinho.\n\nPath\n\n{_id}"
				},
				{
					"name": "Cadastrar Produtos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const keywords = [\r",
									"    \"Smartphone\", \"Tablet\", \"Notebook\", \"Smartwatch\", \"Fone de ouvido\", \"Caixa de som\", \"Câmera digital\",\r",
									"    \"Roteador\", \"Impressora\", \"Teclado\", \"Mouse\", \"Monitor\", \"Console de videogame\", \"Drone\", \"Robô aspirador\"\r",
									"];\r",
									"\r",
									"\r",
									"function generateRandomProductName() {\r",
									"    const randomIndex = Math.floor(Math.random() * keywords.length);\r",
									"    return keywords[randomIndex];\r",
									"}\r",
									"\r",
									"pm.environment.set(\"produto\", generateRandomProductName());\r",
									"\r",
									"pm.environment.set(\"preco\", Math.floor(Math.random() * 900) + 100);\r",
									"\r",
									"pm.environment.set(\"descricao\", pm.variables.replaceIn('{{$randomLoremSentences}}'));\r",
									"\r",
									"pm.environment.set(\"quantidade\", Math.floor(Math.random() * 900) + 100);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica cadastro de produto com sucesso\", function(){\r",
									"    pm.expect(respData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"    pm.expect(respData._id).to.not.be.null;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{produto}}\",\r\n  \"preco\": {{preco}},\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": {{quantidade}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/produtos",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar Produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Listar produtos com sucesso\", function(){\r",
									"    pm.expect(respData.produtos).to.be.an('array').that.is.not.empty;\r",
									"    respData.produtos.forEach(function(produto) {\r",
									"        pm.expect(produto._id).to.not.be.null;\r",
									"        pm.expect(produto.nome).to.not.be.null;\r",
									"        pm.expect(produto.descricao).to.not.be.null;\r",
									"        pm.expect(produto.quantidade).to.not.be.null;        \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/produtos",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar produto pelo ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Listar produto com sucesso pelo ID\", function(){\r",
									"    pm.expect(respData).to.be.an('object').that.is.not.empty;\r",
									"    pm.expect(respData._id).to.not.be.null;\r",
									"    pm.expect(respData.nome).to.not.be.null;\r",
									"    pm.expect(respData.descricao).to.not.be.null;\r",
									"    pm.expect(respData.quantidade).to.not.be.null;        \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/produtos/:id",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"produtos",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "09KYZUVSa4gZs4ay"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar Produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica o produto foi editado com sucesso\", function(){\r",
									"    pm.expect(respData.message).to.eql(\"Registro alterado com sucesso\");\r",
									"    pm.expect(respData._id).to.not.be.null;\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"nome\": \"Samsung 60 polegadas\",\r\n      \"preco\": 5240,\r\n      \"descricao\": \"TV 60 polegadas\",\r\n      \"quantidade\": 49977\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/produtos/:id",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"produtos",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "K6leHdftCeOJj8BJ"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Casos de testes para o endpoint Produtos da API ServerRest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{tokenValido}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const login = {\r",
					"    url: pm.environment.get(\"Base_URL\") + \"/login\",\r",
					"    method: \"POST\",\r",
					"    header: {\r",
					"        \"Content-Type\" : \"application/json\"\r",
					"    },\r",
					"    body: {\r",
					"        mode: \"raw\",\r",
					"        raw: JSON.stringify({\r",
					"            \"email\": \"email@camila.com.br\",\r",
					"            \"password\": \"teste\"\r",
					"        })\r",
					"    }\r",
					"};\r",
					"pm.sendRequest(login, function(err, res){\r",
					"    pm.expect(err).is.null;\r",
					"    pm.environment.set(\"tokenValido\", res.json().authorization.split(\" \")[1]);\r",
					"});\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}